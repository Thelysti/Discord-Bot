const model = require('../../database/models/badge');
const Schema = require('../../database/models/profile');
const CreditsSchema = require("../../database/models/votecredits");

module.exports = async (client, interaction, args) => {

    const badgeFlags = {
        DEVELOPER: client.emotes.badges.developer,
        EVENT: client.emotes.badges.event,
        BOOSTER: client.emotes.badges.booster,
        BUGS: client.emotes.badges.bug,
        MANAGEMENT: client.emotes.badges.management,
        PREMIUM: client.emotes.badges.premium,
        SUPPORTER: client.emotes.badges.supporter,
        TEAM: client.emotes.badges.team,
        BOOSTER: client.emotes.badges.booster,
        PARTNER: client.emotes.badges.partner,
        VOTER: client.emotes.badges.voter,
        SUPPORT: client.emotes.badges.support,
        MODERATOR: client.emotes.badges.moderator,
        DESIGNER: client.emotes.badges.designer,
        MARKETING: client.emotes.badges.marketing,
        ACTIVE: client.emotes.badges.active,
        VIP: client.emotes.badges.vip
    }

    const flags = {
        ActiveDeveloper: "üë®‚Äçüíª„ÉªActive Developer",
        BugHunterLevel1: "üêõ„ÉªDiscord Bug Hunter",
        BugHunterLevel2: "üêõ„ÉªDiscord Bug Hunter",
        CertifiedModerator: "üëÆ‚Äç‚ôÇÔ∏è„ÉªCertified Moderator",
        HypeSquadOnlineHouse1: "üè†„ÉªHouse Bravery Member",
        HypeSquadOnlineHouse2: "üè†„ÉªHouse Brilliance Member",
        HypeSquadOnlineHouse3: "üè†„ÉªHouse Balance Member",
        HypeSquadEvents: "üè†„ÉªHypeSquad Events",
        PremiumEarlySupporter: "üëë„ÉªEarly Supporter",
        Partner: "üëë„ÉªPartner",
        Quarantined: "üîí„ÉªQuarantined", // Not sure if this is still a thing
        Spammer: "üîí„ÉªSpammer", // Not sure if this one works
        Staff: "üë®‚Äçüíº„ÉªDiscord Staff",
        TeamPseudoUser: "üë®‚Äçüíº„ÉªDiscord Team",
        VerifiedBot: "ü§ñ„ÉªVerified Bot",
        VerifiedDeveloper: "üë®‚Äçüíª„Éª(early)Verified Bot Developer",
    }

    const user = interaction.options.getUser('user') || interaction.user;

    Schema.findOne({ User: user.id }, async (err, data) => {
        if (data) {
            let Badges = await model.findOne({ User: user.id });

            let credits = 0;
            const creditData = await CreditsSchema.findOne({ User: user.id });

            if (Badges && Badges.FLAGS.includes("DEVELOPER")) {
                credits = "‚àû";
            }
            else if (creditData) {
                credits = creditData.Credits;
            }

            if (!Badges) Badges = { User: user.id };

            const userFlags = user.flags ? user.flags.toArray() : [];

            client.embed({
                title: `${client.user.username}„Éª–ü—Ä–æ—Ñ–∏–ª—å`,
                desc: '_____',
                thumbnail: user.avatarURL({ dynamic: true }),
                fields: [{
                    name: "üë§‚îÜ–ù–∏–∫",
                    value: user.username,
                    inline: true
                },
                {
                    name: "üìò‚îÜ–¢—ç–≥",
                    value: user.discriminator,
                    inline: true
                },
                {
                    name: "üÜî‚îÜID",
                    value: user.id,
                    inline: true
                },
                {
                    name: "üë®‚Äçüë©‚Äçüë¶‚îÜ–ì–µ–Ω–¥–µ—Ä",
                    value: `${data.Gender || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
                    inline: true
                },
                {
                    name: "üî¢‚îÜ–í–æ–∑—Ä–∞—Å—Ç",
                    value: `${data.Age || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
                    inline: true
                },
                {
                    name: "üéÇ‚îÜ–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ",
                    value: `${data.Birthday || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
                    inline: true
                },
                {
                    name: "üé®‚îÜ–õ—é–±–∏–º—ã–π —Ü–≤–µ—Ç",
                    value: `${data.Color || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
                    inline: true
                },
                {
                    name: "üê∂‚îÜ–õ—é–±–∏–º—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ",
                    value: `${data.Pets.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
                    inline: true
                },
                {
                    name: "üçï‚îÜ–õ—é–±–∏–º–∞—è –µ–¥–∞",
                    value: `${data.Food.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
                    inline: true
                },
                {
                    name: "üé∂‚îÜ–õ—é–±–∏–º—ã–µ –ø–µ—Å–Ω–∏",
                    value: `${data.Songs.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
                    inline: true
                },
                {
                    name: "üé§‚îÜ–õ—é–±–∏–º—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏",
                    value: `${data.Artists.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
                    inline: true
                },
                {
                    name: "üé¨‚îÜ–õ—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã",
                    value: `${data.Movies.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
                    inline: true
                },
                {
                    name: "üë®‚Äçüé§‚îÜ–õ—é–±–∏–º—ã–µ –∞–∫—Ç–µ—Ä—ã",
                    value: `${data.Actors.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
                    inline: true
                },
                {
                    name: "üè¥‚îÜ–ì–æ—Ä–æ–¥",
                    value: `${data.Orgin || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
                    inline: true
                },
                {
                    name: "üéÆ‚îÜ–•–æ–±–±–∏",
                    value: `${data.Hobbys.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
                    inline: true
                },
                {
                    name: "üòõ‚îÜ–°—Ç–∞—Ç—É—Å",
                    value: `${data.Status || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
                    inline: true
                },
                {
                    name: "üìõ‚îÜ–ë–µ–π–¥–∂–∏–∫–∏ –ë–æ—Ç–∞",
                    value: `${Badges.FLAGS ? Badges.FLAGS.map(flag => badgeFlags[flag]).join(' ') : '–ù–µ—Ç—É'}`,
                    inline: true
                },
                {
                    name: "üè∑Ô∏è‚îÜDiscord –ë–µ–π–¥–∂–∏–∫–∏",
                    value: `${userFlags.length ? userFlags.map(flag => flags[flag]).join(', ') : '–ù–µ—Ç—É' || '–ù–µ—Ç—É'}`,
                    inline: true
                },
                {
                    name: "üí≥‚îÜDcredits",
                    value: `${credits || '–ù–µ—Ç—É'}`,
                    inline: true
                },
                {
                    name: "‚ÑπÔ∏è‚îÜ–û–±–æ –º–Ω–µ",
                    value: `${data.Aboutme || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
                    inline: false
                },], type: 'editreply'
            }, interaction);
        }
        else {
            return client.errNormal({ error: "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile create", type:'editreply' }, interaction);
        }
    })
}

 